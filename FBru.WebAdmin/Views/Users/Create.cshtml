@model FBru.Repository.Entities.User
@{
    ViewBag.Title = "Create";
    ViewBag.SubTitle = "Enter a name to create new user";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-sm-12">
        <form id="addUser">
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Email, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Email, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Password, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.PasswordFor(model => model.Password, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.Password, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.PhoneNumber, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNumber, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.GroupId, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownList("GroupId", null, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.GroupId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button class="btn btn-success btn-sm">Create</button>
                    </div>
                </div>
            </div>
        </form>
        <hr/>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>

@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function() {
            $("#addUser").validate();

            $("#addUser").submit(function(e) {
                e.preventDefault();
                var vm = {
                    __RequestVerificationToken: $("[name='__RequestVerificationToken']").val(),
                    Name: $("#Name").val().trim(),
                    GroupId: $("#GroupId").val(),
                    Email: $("#Email").val(),
                    Password: $("#Password").val(),
                    PhoneNumber: $("#PhoneNumber").val()
                };


                $.ajax({
                    url: "/Users/Create",
                    method: "post",
                    data: vm
                }).done(function(data) {
                    if (data.Status === true) {
                        toastr.success(data.Message);
                        setTimeout(function() {
                                window.location.href = window.location.origin + data.ReturnUrl;
                            },
                            1000);
                    }
                    if (data.Status === false && data.BadRequest === true) {
                        toastr.error(data.Message);
                        setTimeout(function() {
                                window.location.href = window.location.origin + data.ReturnUrl;
                            },
                            1000);
                    }
                    if (data.Status === false && data.BadRequest === false) {
                        toastr.error(data.Message);
                        if (data.ReturnUrl != null) {
                            setTimeout(function() {
                                    window.location.href = window.location.origin + data.ReturnUrl;
                                },
                                1000);
                        }
                    }
                }).fail(function() {
                    toastr.error("Something unexpected happend!");
                });
            });
        });
    </script>
}