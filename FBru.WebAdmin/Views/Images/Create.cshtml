@model FBru.Repository.Entities.Image

@{
    ViewBag.Title = "Create";
    ViewBag.SubTitle = "Fill in all information to upload images";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="row">
    <div class="col-sm-12">
        <form id="uploadImages" enctype="multipart/form-data">
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, "Name", new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Name, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.IsDisplay, "Display", new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        <div class="checkbox" style="margin-left: 20px">
                            @Html.EditorFor(model => model.IsDisplay)
                            @Html.ValidationMessageFor(model => model.IsDisplay, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.DishId, "Dish", new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.DropDownList("DishId", null, new {@class = "form-control"})
                        @Html.ValidationMessageFor(model => model.DishId, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-2">Upload Images</label>
                    <div class="col-md-10">
                        <input id="HttpPostedFileBases" required type="file" name="HttpPostedFileBases" class="form-control" multiple="multiple" accept="image/*"/>
                        @Html.ValidationMessage("HttpPostedFileBases", "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button class="btn btn-success btn-sm">Submit</button>
                    </div>
                </div>
            </div>
        </form>
        <hr/>
        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>
@section scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function() {

            $("#uploadImages").validate();

            $("#uploadImages").submit(function(e) {
                e.preventDefault();
                var filesSelected = $("#HttpPostedFileBases").get(0).files;
                var formData = new FormData();
                formData.append("DishId", $("#DishId").val());
                formData.append("Name", $("#Name").val());
                formData.append("IsDisplay", $("#IsDisplay").is(":checked"));
                formData.append("__RequestVerificationToken", $("[name='__RequestVerificationToken']").val());
                for (var i = 0; i < filesSelected.length; i++) {
                    formData.append(filesSelected[i].name, filesSelected[i]);
                }

                $.ajax({
                    url: "/Images/Create",
                    method: "POST",
                    data: formData,
                    dataType: "json",
                    processData: false,
                    contentType: false
                }).done(function(data) {
                    if (data.Status === true) {
                        toastr.success(data.Message);
                        setTimeout(function() {
                                window.location.href = window.location.origin + data.ReturnUrl;
                            },
                            1000);
                    }
                    if (data.Status === false && data.BadRequest === true) {
                        toastr.error(data.Message);
                        setTimeout(function() {
                                window.location.href = window.location.origin + data.ReturnUrl;
                            },
                            1000);
                    }
                    if (data.Status === false && data.BadRequest === false) {
                        toastr.error(data.Message);
                        if (data.ReturnUrl != null) {
                            setTimeout(function() {
                                    window.location.href = window.location.origin + data.ReturnUrl;
                                },
                                1000);
                        }
                    }
                }).fail(function() {
                    toastr.error("Something unexpected happend!");
                });
            });
        });
    </script>
}